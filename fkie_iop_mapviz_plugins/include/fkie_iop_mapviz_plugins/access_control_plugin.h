// *****************************************************************************
//
// Copyright (c) 2014, Southwest Research Institute速 (SwRI速)
// All rights reserved.
//
// Author: Alexander Tiderko
// Copyright 2022 Fraunhofer FKIE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Based on the mapviz plugin of
// Copyright (c) 2014, Southwest Research Institute速 (SwRI速)
// All rights reserved.
//
// *****************************************************************************


#ifndef FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_PLUGIN_H_
#define FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_PLUGIN_H_

// C++ standard libraries
#include <string>
#include <vector>

#include <mapviz/mapviz_plugin.h>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QTimer>
#include <QWidget>

// ROS libraries
#include <ros/ros.h>
// #include <tf/transform_datatypes.h>

// Mapviz libraries
#include <mapviz/map_canvas.h>

// Messages
#include <fkie_iop_msgs/HandoffRequest.h>
#include <fkie_iop_msgs/HandoffResponse.h>
#include <fkie_iop_msgs/Identification.h>
#include <fkie_iop_msgs/OcuCmd.h>
#include <fkie_iop_msgs/OcuCmdEntry.h>
#include <fkie_iop_msgs/OcuControlReport.h>
#include <fkie_iop_msgs/OcuFeedback.h>
#include <fkie_iop_msgs/OcuServiceInfo.h>
#include <fkie_iop_msgs/System.h>
#include <fkie_iop_msgs/QueryIdentification.h>

// Other Plugin-Files
#include "access_control_client.h"
#include "access_control_robot.h"
#include "access_control_dialog.h"
#include "access_control_settings.h"

// QT autogenerated files
#include "ui_access_control_config.h"
#include "ui_access_control_dialog.h"
#include "ui_access_control_robot.h"

namespace fkie_iop_mapviz_plugins
{

  class AccessControlPlugin : public mapviz::MapvizPlugin
  {
    Q_OBJECT

   public:

    int ACCESS_CONTROL_RELEASE = 10;
    int ACCESS_CONTROL_MONITOR = 11;
    int ACCESS_CONTROL_REQUEST = 12;

    AccessControlPlugin();
    virtual ~AccessControlPlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown()
    {
    }

    void Draw(double x, double y, double scale) {};
    void Paint(QPainter* painter, double x, double y, double scale) {};

    void Transform() {};
    void PrintError(const std::string& message) {};
    void PrintInfo(const std::string& message) {};
    void PrintWarning(const std::string& message) {};

    void LoadConfig(const YAML::Node& node, const std::string& path);
    void SaveConfig(YAML::Emitter& emitter, const std::string& path);

    QWidget* GetConfigWidget(QWidget* parent);

    bool SupportsPainting()
    {
      return true;
    }


   protected:
    /** @brief: Determine for a subsystem a free ocu client to request control. **/
    AccessControlClient* getClientForControl(int subsystem);
    /** @brief Determine for a subsystem a free ocu client to request monitoring of the sensor data. */
    AccessControlClient* getClientForView(int subsystem);
    AccessControlClient* getClient(JausAddress addr);

   protected Q_SLOTS:
    void onShowAccessControl();
    void releaseAll();
    void onFinishedAccessControl(int result);
    void onRobotControlActivated(JausAddress address);
    void onRobotControlDeactivated(JausAddress address);
    void onRobotViewActivated(JausAddress address);
    void onRobotViewDeactivated(JausAddress address);

    void onIopSystem(IopSystemPtr system);
    void onIopFeedback(IopOcuFeedbackPtr feedback, std::string caller_ns);
    void onIopIdent(IopIdentificationPtr ident);
    void onIopControlReport(IopControlReportPtr controller);

    void handoffRequest(fkie_iop_msgs::HandoffRequest request);
    void handoffResponse(fkie_iop_msgs::HandoffResponse response);

    void VisibilityChanged(bool);
    void updateRobots();

   private:
    bool initialized_;
    //ros::Timer timer_update_robots_;
    QTimer* timer_update_robots_;

    Ui::AccessControl ui_;
    AccessControlDialog* acdialog_;
    AccessControlSettings settings_;

    // Ui::Robot ui_robot_;
    QWidget* config_widget_;
    mapviz::MapCanvas* map_canvas_;

    std::vector<AccessControlRobot *> robotlist_;
    std::vector<AccessControlClient *> clientlist_;
  };
}

#endif  // FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_PLUGIN_H_
