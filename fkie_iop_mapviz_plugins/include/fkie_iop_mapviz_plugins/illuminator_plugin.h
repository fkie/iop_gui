// *****************************************************************************
//
// Copyright (c) 2014, Southwest Research Institute速 (SwRI速)
// All rights reserved.
//
// Author: Alexander Tiderko
// Copyright 2022 Fraunhofer FKIE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Based on the mapviz plugin of
// Copyright (c) 2014, Southwest Research Institute速 (SwRI速)
// All rights reserved.
//
// *****************************************************************************


#ifndef FKIE_IOP_MAPVIZ_PLUGINS_Illuminator_PLUGIN_H_
#define FKIE_IOP_MAPVIZ_PLUGINS_Illuminator_PLUGIN_H_

// C++ standard libraries
#include <map>
#include <string>
#include <vector>

#include <mapviz/mapviz_plugin.h>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QTimer>
#include <QWidget>
#include <QLayoutItem>

// ROS libraries
#include <ros/ros.h>
// #include <tf/transform_datatypes.h>

// Mapviz libraries
#include <mapviz/map_canvas.h>

// Messages
#include <std_msgs/Bool.h>
#include <diagnostic_msgs/DiagnosticStatus.h>

// QT autogenerated files
#include "ui_illuminator_config.h"

namespace fkie_iop_mapviz_plugins
{

  class IlluminatorPlugin : public mapviz::MapvizPlugin
  {
    Q_OBJECT

   public:
    IlluminatorPlugin();
    virtual ~IlluminatorPlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown()
    {
    }

    void Draw(double x, double y, double scale) {};
    void Paint(QPainter* painter, double x, double y, double scale) {};

    void Transform() {};
    void PrintError(const std::string& message) { PrintErrorHelper(ui_.status, message, 1.0); };
    void PrintInfo(const std::string& message) { PrintInfoHelper(ui_.status, message, 1.0); };
    void PrintWarning(const std::string& message) { PrintWarningHelper(ui_.status, message, 1.0); };

    void LoadConfig(const YAML::Node& node, const std::string& path);
    void SaveConfig(YAML::Emitter& emitter, const std::string& path);

    QWidget* GetConfigWidget(QWidget* parent);

    bool SupportsPainting()
    {
      return true;
    }


   protected:
    void initTopics();
    void shutdownTopics();
    void callbackIlluminatorStates(const diagnostic_msgs::DiagnosticStatus::ConstPtr& msg);

   protected Q_SLOTS:
    void selectStates();
    void statesEdited();
    void setVisible(bool);

   private:
    bool initialized_;
    //QTimer* timer_update_robots_;

    Ui::IlluminatorConfig ui_;
    QWidget* config_widget_;
    mapviz::MapCanvas* map_canvas_;
    std::string ns_;
    std::string topic_name_states_;
    std::vector<std::string> topics_;

    ros::NodeHandle* node_;
    ros::Subscriber sub_states_;
    void clear_buttons();
    std::vector<std::string> split(const std::string& s, char delimiter);
  };
}

#endif  // FKIE_IOP_MAPVIZ_PLUGINS_Illuminator_PLUGIN_H_
