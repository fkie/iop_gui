// *****************************************************************************
//
// Copyright (c) 2014, Southwest Research Institute速 (SwRI速)
// All rights reserved.
//
// Author: Alexander Tiderko
// Copyright 2022 Fraunhofer FKIE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Based on the mapviz plugin of
// Copyright (c) 2014, Southwest Research Institute速 (SwRI速)
// All rights reserved.
//
// *****************************************************************************


#ifndef FKIE_IOP_MAPVIZ_PLUGINS_DIGITAL_RESOURCE_PLUGIN_H_
#define FKIE_IOP_MAPVIZ_PLUGINS_DIGITAL_RESOURCE_PLUGIN_H_

// C++ standard libraries
#include <map>
#include <string>
#include <vector>

#include <mapviz/mapviz_plugin.h>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QTimer>
#include <QWidget>

// ROS libraries
#include <ros/ros.h>
// #include <tf/transform_datatypes.h>

// Mapviz libraries
#include <mapviz/map_canvas.h>

// Messages
#include <std_msgs/UInt16.h>
#include <std_msgs/String.h>
#include <fkie_iop_msgs/DigitalResourceEndpoints.h>
#include <fkie_iop_msgs/VisualSensorNames.h>

// Other Plugin-Files
#include "digital_resource_cam.h"

// QT autogenerated files
#include "ui_digital_resource_config.h"

namespace fkie_iop_mapviz_plugins
{
  typedef boost::shared_ptr<const fkie_iop_msgs::DigitalResourceEndpoints_<std::allocator<void> > > IopEndpointsPtr;
  typedef boost::shared_ptr<const fkie_iop_msgs::VisualSensorNames_<std::allocator<void> > > IopVisualNamesPtr;

  class DigitalResourcePlugin : public mapviz::MapvizPlugin
  {
    Q_OBJECT

   public:
    DigitalResourcePlugin();
    virtual ~DigitalResourcePlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown()
    {
    }

    void Draw(double x, double y, double scale) {};
    void Paint(QPainter* painter, double x, double y, double scale) {};

    void Transform() {};
    void PrintError(const std::string& message) { PrintErrorHelper(ui_.status, message, 1.0); };
    void PrintInfo(const std::string& message) { PrintInfoHelper(ui_.status, message, 1.0); };
    void PrintWarning(const std::string& message) { PrintWarningHelper(ui_.status, message, 1.0); };

    void LoadConfig(const YAML::Node& node, const std::string& path);
    void SaveConfig(YAML::Emitter& emitter, const std::string& path);

    QWidget* GetConfigWidget(QWidget* parent);

    bool SupportsPainting()
    {
      return true;
    }


   protected:
    void initTopics();
    void shutdownTopics();
    void shutdownRidTopics();
    void callbackIopEndpoints(const fkie_iop_msgs::DigitalResourceEndpoints::ConstPtr& msg);
    void callbackIopVisualNames(const fkie_iop_msgs::VisualSensorNames::ConstPtr& msg);

   Q_SIGNALS:
    void signalIopEndpoints(IopEndpointsPtr endpoints);
    void signalIopVisualNames(IopVisualNamesPtr names);

   protected Q_SLOTS:
    void selectNS();
    void nsEdited();
    void stateChangedMU(int state);
    void setVisible(bool);
    void onIopEndpoints(IopEndpointsPtr endpoints);
    void onIopVisualNames(IopVisualNamesPtr names);
    void play(QString url, unsigned short resource_id);
    void stop(QString url, unsigned short resource_id);
    void showInfo();


   private:
    bool initialized_;
    //QTimer* timer_update_robots_;

    Ui::DigitalResourceConfig ui_;
    QWidget* config_widget_;
    mapviz::MapCanvas* map_canvas_;
    QDialog* info_dialog_;

    ros::NodeHandle* node_ns_;
    bool multiurl_;
    std::string topic_video_url_;
    std::string topic_endpoints_;
    std::string topic_names_;
    std::string topic_resource_id;

    ros::Publisher pub_resource_id_;
    ros::Publisher pub_video_url_;
    std::map<std::string, ros::Publisher> pub_video_urls_;
    ros::Subscriber sub_endpoints_;
    ros::Subscriber sub_names_;
    std::vector<std::string> played_urls_;

    std::string ns_;
    std::vector<std::string> topics_;
    std::vector<std::string> split(const std::string& s, char delimiter);
    std::map<unsigned short, std::string> resource_names_;

    std::vector<DigitalResourceCam*> cam_list_;
    bool isIn(unsigned short resource_id, const fkie_iop_msgs::DigitalResourceEndpoints::ConstPtr& endpoints);
    bool isIn(unsigned short resource_id, std::vector<DigitalResourceCam*>& cam_list);
    std::string getResourceName(unsigned short resource_id);
  };
}

#endif  // FKIE_IOP_MAPVIZ_PLUGINS_DIGITAL_RESOURCE_PLUGIN_H_
