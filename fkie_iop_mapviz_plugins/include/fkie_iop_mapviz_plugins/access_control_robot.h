// *****************************************************************************
//
// Author: Alexander Tiderko
// Copyright 2022 Fraunhofer FKIE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Based on the mapviz plugin of
// Copyright (c) 2014, Southwest Research Institute® (SwRI®)
// All rights reserved.
//
// *****************************************************************************

#ifndef FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_ROBOT_H_
#define FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_ROBOT_H_

// C++ standard libraries
#include <map>
#include <string>
#include <vector>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QWidget>

// ROS libraries
#include <ros/ros.h>

// IOP
#include <Transport/JausAddress.h>

// Messages
#include <fkie_iop_msgs/Identification.h>
#include <fkie_iop_msgs/OcuCmd.h>
#include <fkie_iop_msgs/OcuCmdEntry.h>
#include <fkie_iop_msgs/OcuControlReport.h>
#include <fkie_iop_msgs/OcuFeedback.h>
#include <fkie_iop_msgs/OcuServiceInfo.h>
#include <fkie_iop_msgs/Subsystem.h>
#include <fkie_iop_msgs/System.h>
#include <fkie_iop_msgs/QueryIdentification.h>

// Other Plugin-Files
#include "access_control_client.h"

// QT autogenerated files
#include "ui_access_control_robot.h"
#include "ui_access_control_system_info.h"
#include "ui_access_control_warning_info.h"

Q_DECLARE_METATYPE(JausAddress)

namespace fkie_iop_mapviz_plugins
{
  class AccessControlRobot : public QWidget
  {
    Q_OBJECT

   public:
    int MAX_AGE = 30.0;

    AccessControlRobot(fkie_iop_msgs::Subsystem subsystem, int authority=205);
    virtual ~AccessControlRobot();

    bool updateSubsystem(const fkie_iop_msgs::Subsystem& subsystem);
    Ui::Robot& getRobotUI();
    std::string name();
    int getSubsystemID();
    AccessControlClient* getOcuClient();
    void setOcuClient(AccessControlClient* client);
    JausAddress getControlAddr();
    void setControlAddr(JausAddress address);
    void setControlActive(bool state);
    bool isOld();
    bool hasControl();
    bool hasView();
    void releaseControl();
    void activateView();
    fkie_iop_msgs::OcuCmdEntry stateToCmd();
    AccessControlClient* ocuClientRestricted();
    void updateFeedbackWarnings();
    void setWarnings(std::vector<std::string> warnings);
    void updateWarningsButton();
    void updateIdent(const fkie_iop_msgs::Identification::ConstPtr& msg);

   Q_SIGNALS:
    void control_activated(JausAddress address);
    void control_deactivated(JausAddress Address);
    void view_activated(JausAddress Address);
    void view_deactivated(JausAddress Address);


   public Q_SLOTS:
    /** @brief: Click on view robot button. Change to monitor or not controlled state.
     *          Publishes the signals: view_activated() or control_deactivated(). **/
    void onRobotView(bool checked=false);
    /** @brief: Click on control robot button. Change to controlled or monitor state.
     *          Publishes the signals: control_activated() or view_activated(). **/
    void onRobotControl(bool checked=false);
    void onShowHandoff(bool checked=false);
    void onShowWarnings(bool checked=false);
    void onShowDetails(bool checked=false);

   private:
    Ui::Robot ui_robot_;
    Ui::SystemInfo ui_system_info_;
    Ui::WarningInfo ui_warning_info_;
 
    AccessControlClient* ocu_client_;
    fkie_iop_msgs::Subsystem subsystem_;
    int authority_;
    ros::WallTime last_update_;
    std::map<JausAddress, std::string> component_names_;
    std::vector<std::string> warnings_;
    std::map<JausAddress, std::vector<fkie_iop_msgs::OcuServiceInfo> > feedback_warnings_;

    JausAddress control_addr_;
    QDialog* detailed_dialog_;
    QDialog* warning_dialog_;
    //HandoffDialog* handoff_dialog_;
    std::string getComponentName(fkie_iop_msgs::JausAddress address);
    std::string accessStateToStr(int state);
  };
}

#endif  // FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_ROBOT_H_
