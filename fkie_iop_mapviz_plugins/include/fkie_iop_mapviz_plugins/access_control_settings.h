// *****************************************************************************
//
// Author: Alexander Tiderko
// Copyright 2022 Fraunhofer FKIE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Based on the mapviz plugin of
// Copyright (c) 2014, Southwest Research Institute® (SwRI®)
// All rights reserved.
//
// *****************************************************************************

#ifndef FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_SETTINGS_H_
#define FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_SETTINGS_H_

// C++ standard libraries
#include <map>
#include <string>
#include <vector>

// QT libraries
#include <QObject>

// ROS libraries
#include <ros/ros.h>
#include <swri_yaml_util/yaml_util.h>

// IOP
#include <Transport/JausAddress.h>

// Messages
#include <fkie_iop_msgs/Identification.h>
#include <fkie_iop_msgs/OcuCmd.h>
#include <fkie_iop_msgs/OcuCmdEntry.h>
#include <fkie_iop_msgs/OcuControlReport.h>
#include <fkie_iop_msgs/OcuFeedback.h>
#include <fkie_iop_msgs/OcuServiceInfo.h>
#include <fkie_iop_msgs/Subsystem.h>
#include <fkie_iop_msgs/System.h>
#include <fkie_iop_msgs/QueryIdentification.h>

// QT autogenerated files
#include "ui_access_control_config.h"

Q_DECLARE_SMART_POINTER_METATYPE(boost::shared_ptr)
//Q_DECLARE_SMART_POINTER_METATYPE(boost::shared_ptr<const fkie_iop_msgs::System>)
Q_DECLARE_METATYPE(fkie_iop_msgs::System)
Q_DECLARE_METATYPE(fkie_iop_msgs::Subsystem)
Q_DECLARE_METATYPE(fkie_iop_msgs::OcuFeedback)
Q_DECLARE_METATYPE(fkie_iop_msgs::OcuServiceInfo)
Q_DECLARE_METATYPE(fkie_iop_msgs::Identification)
Q_DECLARE_METATYPE(fkie_iop_msgs::OcuControlReport)

namespace fkie_iop_mapviz_plugins
{
  typedef boost::shared_ptr<const fkie_iop_msgs::System_<std::allocator<void> > > IopSystemPtr;
  typedef boost::shared_ptr<const fkie_iop_msgs::OcuFeedback_<std::allocator<void> > > IopOcuFeedbackPtr;
  typedef boost::shared_ptr<const fkie_iop_msgs::Identification_<std::allocator<void> > > IopIdentificationPtr;
  typedef boost::shared_ptr<const fkie_iop_msgs::OcuControlReport_<std::allocator<void> > > IopControlReportPtr;

  class AccessControlSettings : public QObject
  {
    Q_OBJECT

   public:
    int MAX_AGE = 30.0;

    AccessControlSettings(Ui::AccessControl& ui);
    virtual ~AccessControlSettings();
    void initialize();
    void initTopics();
    void shutdownTopics();
    void printError(const std::string& message);
    void printInfo(const std::string& message);
    void printWarning(const std::string& message);
    void loadConfig(const YAML::Node& node, const std::string& path);
    void saveConfig(YAML::Emitter& emitter, const std::string& path);
    void publishCmd(fkie_iop_msgs::OcuCmd& cmd);

   Q_SIGNALS:
    void signal_system(IopSystemPtr system);
    void signal_feedback(IopOcuFeedbackPtr feedback, std::string caller_ns);
    void signal_ident(IopIdentificationPtr ident);
    void signal_control_report(IopControlReportPtr controller);

//   protected Q_SLOTS:

   protected:
    void callbackIopSystem(const fkie_iop_msgs::System::ConstPtr& msg);
    void callbackIopFeedback(const ros::MessageEvent<const fkie_iop_msgs::OcuFeedback>& event);
    void callbackIopIdent(const fkie_iop_msgs::Identification::ConstPtr& msg);
    void callbackIopControlReport(const fkie_iop_msgs::OcuControlReport::ConstPtr& msg);

   private:
    bool initialized_;
    Ui::AccessControl& ui_;
    ros::NodeHandle* node_ns_;
    int authority_;
    std::string namespace_;
    std::string service_update_;
    std::string topic_discovery_;
    std::string topic_identification_;
    std::string topic_command_;
    std::string topic_feedback_;
    std::string topic_control_report_;

    // ros::Service srv_update_;
    ros::Publisher pub_cmd_;
    ros::Subscriber sub_discovery_;
    ros::Subscriber sub_identification_;
    ros::Subscriber sub_feedback_;
    ros::Subscriber sub_control_report_;
  };
}

#endif  // FKIE_IOP_MAPVIZ_PLUGINS_ACCESS_CONTROL_SETTINGS_H_
